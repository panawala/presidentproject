#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.269
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataLib
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="town")]
	public partial class TownDBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertR_INDEX(R_INDEX instance);
    partial void UpdateR_INDEX(R_INDEX instance);
    partial void DeleteR_INDEX(R_INDEX instance);
    partial void Insertct_Class(ct_Class instance);
    partial void Updatect_Class(ct_Class instance);
    partial void Deletect_Class(ct_Class instance);
    partial void InsertI_INDEX(I_INDEX instance);
    partial void UpdateI_INDEX(I_INDEX instance);
    partial void DeleteI_INDEX(I_INDEX instance);
    partial void InsertI_SOURCE(I_SOURCE instance);
    partial void UpdateI_SOURCE(I_SOURCE instance);
    partial void DeleteI_SOURCE(I_SOURCE instance);
    partial void InsertI_ZONE(I_ZONE instance);
    partial void UpdateI_ZONE(I_ZONE instance);
    partial void DeleteI_ZONE(I_ZONE instance);
    partial void InsertI_INDEX_EX(I_INDEX_EX instance);
    partial void UpdateI_INDEX_EX(I_INDEX_EX instance);
    partial void DeleteI_INDEX_EX(I_INDEX_EX instance);
    partial void InsertI_INDEX_HIGH_LEVEL(I_INDEX_HIGH_LEVEL instance);
    partial void UpdateI_INDEX_HIGH_LEVEL(I_INDEX_HIGH_LEVEL instance);
    partial void DeleteI_INDEX_HIGH_LEVEL(I_INDEX_HIGH_LEVEL instance);
    #endregion
		
		public TownDBDataContext() : 
				base(global::DataLib.Properties.Settings.Default.townConnectionString1, mappingSource)
		{
			OnCreated();
		}
		
		public TownDBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TownDBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TownDBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TownDBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Calendar> Calendar
		{
			get
			{
				return this.GetTable<Calendar>();
			}
		}
		
		public System.Data.Linq.Table<R_INDEX> R_INDEX
		{
			get
			{
				return this.GetTable<R_INDEX>();
			}
		}
		
		public System.Data.Linq.Table<ct_Class> ct_Class
		{
			get
			{
				return this.GetTable<ct_Class>();
			}
		}
		
		public System.Data.Linq.Table<ct_Indicator> ct_Indicator
		{
			get
			{
				return this.GetTable<ct_Indicator>();
			}
		}
		
		public System.Data.Linq.Table<I_DEVIDE> I_DEVIDE
		{
			get
			{
				return this.GetTable<I_DEVIDE>();
			}
		}
		
		public System.Data.Linq.Table<I_INDEX> I_INDEX
		{
			get
			{
				return this.GetTable<I_INDEX>();
			}
		}
		
		public System.Data.Linq.Table<I_REMARK> I_REMARK
		{
			get
			{
				return this.GetTable<I_REMARK>();
			}
		}
		
		public System.Data.Linq.Table<I_ResultData> I_ResultData
		{
			get
			{
				return this.GetTable<I_ResultData>();
			}
		}
		
		public System.Data.Linq.Table<I_SOURCE> I_SOURCE
		{
			get
			{
				return this.GetTable<I_SOURCE>();
			}
		}
		
		public System.Data.Linq.Table<I_ZONE> I_ZONE
		{
			get
			{
				return this.GetTable<I_ZONE>();
			}
		}
		
		public System.Data.Linq.Table<I_INDEX_EX> I_INDEX_EX
		{
			get
			{
				return this.GetTable<I_INDEX_EX>();
			}
		}
		
		public System.Data.Linq.Table<I_INDEX_HIGH_LEVEL> I_INDEX_HIGH_LEVELs
		{
			get
			{
				return this.GetTable<I_INDEX_HIGH_LEVEL>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Calendar")]
	public partial class Calendar
	{
		
		private int _cyear;
		
		private System.DateTime _cdate;
		
		public Calendar()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cyear", DbType="Int NOT NULL")]
		public int cyear
		{
			get
			{
				return this._cyear;
			}
			set
			{
				if ((this._cyear != value))
				{
					this._cyear = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cdate", DbType="DateTime NOT NULL")]
		public System.DateTime cdate
		{
			get
			{
				return this._cdate;
			}
			set
			{
				if ((this._cdate != value))
				{
					this._cdate = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.R_INDEX")]
	public partial class R_INDEX : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _MainIndex;
		
		private long _SubIndex;
		
		private EntityRef<I_INDEX> _I_INDEX;
		
		private EntityRef<I_INDEX> _I_INDEX1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnMainIndexChanging(long value);
    partial void OnMainIndexChanged();
    partial void OnSubIndexChanging(long value);
    partial void OnSubIndexChanged();
    #endregion
		
		public R_INDEX()
		{
			this._I_INDEX = default(EntityRef<I_INDEX>);
			this._I_INDEX1 = default(EntityRef<I_INDEX>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MainIndex", DbType="BigInt NOT NULL")]
		public long MainIndex
		{
			get
			{
				return this._MainIndex;
			}
			set
			{
				if ((this._MainIndex != value))
				{
					if (this._I_INDEX1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMainIndexChanging(value);
					this.SendPropertyChanging();
					this._MainIndex = value;
					this.SendPropertyChanged("MainIndex");
					this.OnMainIndexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubIndex", DbType="BigInt NOT NULL")]
		public long SubIndex
		{
			get
			{
				return this._SubIndex;
			}
			set
			{
				if ((this._SubIndex != value))
				{
					if (this._I_INDEX.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubIndexChanging(value);
					this.SendPropertyChanging();
					this._SubIndex = value;
					this.SendPropertyChanged("SubIndex");
					this.OnSubIndexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="I_INDEX_R_INDEX", Storage="_I_INDEX", ThisKey="SubIndex", OtherKey="ID", IsForeignKey=true)]
		public I_INDEX I_INDEX
		{
			get
			{
				return this._I_INDEX.Entity;
			}
			set
			{
				I_INDEX previousValue = this._I_INDEX.Entity;
				if (((previousValue != value) 
							|| (this._I_INDEX.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._I_INDEX.Entity = null;
						previousValue.R_INDEX.Remove(this);
					}
					this._I_INDEX.Entity = value;
					if ((value != null))
					{
						value.R_INDEX.Add(this);
						this._SubIndex = value.ID;
					}
					else
					{
						this._SubIndex = default(long);
					}
					this.SendPropertyChanged("I_INDEX");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="I_INDEX_R_INDEX1", Storage="_I_INDEX1", ThisKey="MainIndex", OtherKey="ID", IsForeignKey=true)]
		public I_INDEX I_INDEX1
		{
			get
			{
				return this._I_INDEX1.Entity;
			}
			set
			{
				I_INDEX previousValue = this._I_INDEX1.Entity;
				if (((previousValue != value) 
							|| (this._I_INDEX1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._I_INDEX1.Entity = null;
						previousValue.R_INDEX1.Remove(this);
					}
					this._I_INDEX1.Entity = value;
					if ((value != null))
					{
						value.R_INDEX1.Add(this);
						this._MainIndex = value.ID;
					}
					else
					{
						this._MainIndex = default(long);
					}
					this.SendPropertyChanged("I_INDEX1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ct_Class")]
	public partial class ct_Class : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _code;
		
		private string _codename;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OncodeChanging(int value);
    partial void OncodeChanged();
    partial void OncodenameChanging(string value);
    partial void OncodenameChanged();
    #endregion
		
		public ct_Class()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_code", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int code
		{
			get
			{
				return this._code;
			}
			set
			{
				if ((this._code != value))
				{
					this.OncodeChanging(value);
					this.SendPropertyChanging();
					this._code = value;
					this.SendPropertyChanged("code");
					this.OncodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_codename", DbType="Char(10) NOT NULL", CanBeNull=false)]
		public string codename
		{
			get
			{
				return this._codename;
			}
			set
			{
				if ((this._codename != value))
				{
					this.OncodenameChanging(value);
					this.SendPropertyChanging();
					this._codename = value;
					this.SendPropertyChanged("codename");
					this.OncodenameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ct_Indicator")]
	public partial class ct_Indicator
	{
		
		private string _id;
		
		private string _code;
		
		private string _codename;
		
		private int _classid;
		
		public ct_Indicator()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this._id = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_code", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string code
		{
			get
			{
				return this._code;
			}
			set
			{
				if ((this._code != value))
				{
					this._code = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_codename", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string codename
		{
			get
			{
				return this._codename;
			}
			set
			{
				if ((this._codename != value))
				{
					this._codename = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_classid", DbType="Int NOT NULL")]
		public int classid
		{
			get
			{
				return this._classid;
			}
			set
			{
				if ((this._classid != value))
				{
					this._classid = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.I_DEVIDE")]
	public partial class I_DEVIDE
	{
		
		private long _ID;
		
		private long _Zone;
		
		private System.DateTime _FromDate;
		
		private System.DateTime _ToDate;
		
		private string _Attribute;
		
		private string _AttrCode;
		
		private string _Class;
		
		private string _ClassCode;
		
		public I_DEVIDE()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="BigInt NOT NULL")]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Zone", DbType="BigInt NOT NULL")]
		public long Zone
		{
			get
			{
				return this._Zone;
			}
			set
			{
				if ((this._Zone != value))
				{
					this._Zone = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FromDate", DbType="DateTime NOT NULL")]
		public System.DateTime FromDate
		{
			get
			{
				return this._FromDate;
			}
			set
			{
				if ((this._FromDate != value))
				{
					this._FromDate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ToDate", DbType="DateTime NOT NULL")]
		public System.DateTime ToDate
		{
			get
			{
				return this._ToDate;
			}
			set
			{
				if ((this._ToDate != value))
				{
					this._ToDate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Attribute", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Attribute
		{
			get
			{
				return this._Attribute;
			}
			set
			{
				if ((this._Attribute != value))
				{
					this._Attribute = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AttrCode", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string AttrCode
		{
			get
			{
				return this._AttrCode;
			}
			set
			{
				if ((this._AttrCode != value))
				{
					this._AttrCode = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Class", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Class
		{
			get
			{
				return this._Class;
			}
			set
			{
				if ((this._Class != value))
				{
					this._Class = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClassCode", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ClassCode
		{
			get
			{
				return this._ClassCode;
			}
			set
			{
				if ((this._ClassCode != value))
				{
					this._ClassCode = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.I_INDEX")]
	public partial class I_INDEX : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private byte _Type;
		
		private byte _Class;
		
		private int _Group;
		
		private string _Name;
		
		private System.DateTime _FromDate;
		
		private System.DateTime _ToDate;
		
		private string _Remark;
		
		private string _Rule;
		
		private System.Nullable<long> _Source;
		
		private long _Zone;
		
		private float _Value;
		
		private System.Nullable<float> _StdValue;
		
		private System.Nullable<float> _WarnValueHigh;
		
		private System.Nullable<float> _WarnValueLow;
		
		private string _Unit;
		
		private EntitySet<R_INDEX> _R_INDEX;
		
		private EntitySet<R_INDEX> _R_INDEX1;
		
		private EntityRef<I_SOURCE> _I_SOURCE;
		
		private EntityRef<I_ZONE> _I_ZONE;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnTypeChanging(byte value);
    partial void OnTypeChanged();
    partial void OnClassChanging(byte value);
    partial void OnClassChanged();
    partial void OnGroupChanging(int value);
    partial void OnGroupChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnFromDateChanging(System.DateTime value);
    partial void OnFromDateChanged();
    partial void OnToDateChanging(System.DateTime value);
    partial void OnToDateChanged();
    partial void OnRemarkChanging(string value);
    partial void OnRemarkChanged();
    partial void OnRuleChanging(string value);
    partial void OnRuleChanged();
    partial void OnSourceChanging(System.Nullable<long> value);
    partial void OnSourceChanged();
    partial void OnZoneChanging(long value);
    partial void OnZoneChanged();
    partial void OnValueChanging(float value);
    partial void OnValueChanged();
    partial void OnStdValueChanging(System.Nullable<float> value);
    partial void OnStdValueChanged();
    partial void OnWarnValueHighChanging(System.Nullable<float> value);
    partial void OnWarnValueHighChanged();
    partial void OnWarnValueLowChanging(System.Nullable<float> value);
    partial void OnWarnValueLowChanged();
    partial void OnUnitChanging(string value);
    partial void OnUnitChanged();
    #endregion
		
		public I_INDEX()
		{
			this._R_INDEX = new EntitySet<R_INDEX>(new Action<R_INDEX>(this.attach_R_INDEX), new Action<R_INDEX>(this.detach_R_INDEX));
			this._R_INDEX1 = new EntitySet<R_INDEX>(new Action<R_INDEX>(this.attach_R_INDEX1), new Action<R_INDEX>(this.detach_R_INDEX1));
			this._I_SOURCE = default(EntityRef<I_SOURCE>);
			this._I_ZONE = default(EntityRef<I_ZONE>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="TinyInt NOT NULL")]
		public byte Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Class", DbType="TinyInt NOT NULL")]
		public byte Class
		{
			get
			{
				return this._Class;
			}
			set
			{
				if ((this._Class != value))
				{
					this.OnClassChanging(value);
					this.SendPropertyChanging();
					this._Class = value;
					this.SendPropertyChanged("Class");
					this.OnClassChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Group]", Storage="_Group", DbType="Int NOT NULL")]
		public int Group
		{
			get
			{
				return this._Group;
			}
			set
			{
				if ((this._Group != value))
				{
					this.OnGroupChanging(value);
					this.SendPropertyChanging();
					this._Group = value;
					this.SendPropertyChanged("Group");
					this.OnGroupChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(100)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FromDate", DbType="DateTime NOT NULL")]
		public System.DateTime FromDate
		{
			get
			{
				return this._FromDate;
			}
			set
			{
				if ((this._FromDate != value))
				{
					this.OnFromDateChanging(value);
					this.SendPropertyChanging();
					this._FromDate = value;
					this.SendPropertyChanged("FromDate");
					this.OnFromDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ToDate", DbType="DateTime NOT NULL")]
		public System.DateTime ToDate
		{
			get
			{
				return this._ToDate;
			}
			set
			{
				if ((this._ToDate != value))
				{
					this.OnToDateChanging(value);
					this.SendPropertyChanging();
					this._ToDate = value;
					this.SendPropertyChanged("ToDate");
					this.OnToDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Remark", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this.OnRemarkChanging(value);
					this.SendPropertyChanging();
					this._Remark = value;
					this.SendPropertyChanged("Remark");
					this.OnRemarkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Rule]", Storage="_Rule", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string Rule
		{
			get
			{
				return this._Rule;
			}
			set
			{
				if ((this._Rule != value))
				{
					this.OnRuleChanging(value);
					this.SendPropertyChanging();
					this._Rule = value;
					this.SendPropertyChanged("Rule");
					this.OnRuleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Source", DbType="BigInt")]
		public System.Nullable<long> Source
		{
			get
			{
				return this._Source;
			}
			set
			{
				if ((this._Source != value))
				{
					if (this._I_SOURCE.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSourceChanging(value);
					this.SendPropertyChanging();
					this._Source = value;
					this.SendPropertyChanged("Source");
					this.OnSourceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Zone", DbType="BigInt NOT NULL")]
		public long Zone
		{
			get
			{
				return this._Zone;
			}
			set
			{
				if ((this._Zone != value))
				{
					if (this._I_ZONE.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnZoneChanging(value);
					this.SendPropertyChanging();
					this._Zone = value;
					this.SendPropertyChanged("Zone");
					this.OnZoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="Real NOT NULL")]
		public float Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StdValue", DbType="Real")]
		public System.Nullable<float> StdValue
		{
			get
			{
				return this._StdValue;
			}
			set
			{
				if ((this._StdValue != value))
				{
					this.OnStdValueChanging(value);
					this.SendPropertyChanging();
					this._StdValue = value;
					this.SendPropertyChanged("StdValue");
					this.OnStdValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WarnValueHigh", DbType="Real")]
		public System.Nullable<float> WarnValueHigh
		{
			get
			{
				return this._WarnValueHigh;
			}
			set
			{
				if ((this._WarnValueHigh != value))
				{
					this.OnWarnValueHighChanging(value);
					this.SendPropertyChanging();
					this._WarnValueHigh = value;
					this.SendPropertyChanged("WarnValueHigh");
					this.OnWarnValueHighChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WarnValueLow", DbType="Real")]
		public System.Nullable<float> WarnValueLow
		{
			get
			{
				return this._WarnValueLow;
			}
			set
			{
				if ((this._WarnValueLow != value))
				{
					this.OnWarnValueLowChanging(value);
					this.SendPropertyChanging();
					this._WarnValueLow = value;
					this.SendPropertyChanged("WarnValueLow");
					this.OnWarnValueLowChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Unit", DbType="VarChar(40) NOT NULL", CanBeNull=false)]
		public string Unit
		{
			get
			{
				return this._Unit;
			}
			set
			{
				if ((this._Unit != value))
				{
					this.OnUnitChanging(value);
					this.SendPropertyChanging();
					this._Unit = value;
					this.SendPropertyChanged("Unit");
					this.OnUnitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="I_INDEX_R_INDEX", Storage="_R_INDEX", ThisKey="ID", OtherKey="SubIndex")]
		public EntitySet<R_INDEX> R_INDEX
		{
			get
			{
				return this._R_INDEX;
			}
			set
			{
				this._R_INDEX.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="I_INDEX_R_INDEX1", Storage="_R_INDEX1", ThisKey="ID", OtherKey="MainIndex")]
		public EntitySet<R_INDEX> R_INDEX1
		{
			get
			{
				return this._R_INDEX1;
			}
			set
			{
				this._R_INDEX1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="I_SOURCE_I_INDEX", Storage="_I_SOURCE", ThisKey="Source", OtherKey="ID", IsForeignKey=true)]
		public I_SOURCE I_SOURCE
		{
			get
			{
				return this._I_SOURCE.Entity;
			}
			set
			{
				I_SOURCE previousValue = this._I_SOURCE.Entity;
				if (((previousValue != value) 
							|| (this._I_SOURCE.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._I_SOURCE.Entity = null;
						previousValue.I_INDEX.Remove(this);
					}
					this._I_SOURCE.Entity = value;
					if ((value != null))
					{
						value.I_INDEX.Add(this);
						this._Source = value.ID;
					}
					else
					{
						this._Source = default(Nullable<long>);
					}
					this.SendPropertyChanged("I_SOURCE");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="I_ZONE_I_INDEX", Storage="_I_ZONE", ThisKey="Zone", OtherKey="ID", IsForeignKey=true)]
		public I_ZONE I_ZONE
		{
			get
			{
				return this._I_ZONE.Entity;
			}
			set
			{
				I_ZONE previousValue = this._I_ZONE.Entity;
				if (((previousValue != value) 
							|| (this._I_ZONE.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._I_ZONE.Entity = null;
						previousValue.I_INDEX.Remove(this);
					}
					this._I_ZONE.Entity = value;
					if ((value != null))
					{
						value.I_INDEX.Add(this);
						this._Zone = value.ID;
					}
					else
					{
						this._Zone = default(long);
					}
					this.SendPropertyChanged("I_ZONE");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_R_INDEX(R_INDEX entity)
		{
			this.SendPropertyChanging();
			entity.I_INDEX = this;
		}
		
		private void detach_R_INDEX(R_INDEX entity)
		{
			this.SendPropertyChanging();
			entity.I_INDEX = null;
		}
		
		private void attach_R_INDEX1(R_INDEX entity)
		{
			this.SendPropertyChanging();
			entity.I_INDEX1 = this;
		}
		
		private void detach_R_INDEX1(R_INDEX entity)
		{
			this.SendPropertyChanging();
			entity.I_INDEX1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.I_REMARK")]
	public partial class I_REMARK
	{
		
		private long _ID;
		
		private string _Name;
		
		private short _Rank;
		
		private string _Reamrk;
		
		public I_REMARK()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.Always, DbType="BigInt NOT NULL IDENTITY", IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rank", DbType="SmallInt NOT NULL")]
		public short Rank
		{
			get
			{
				return this._Rank;
			}
			set
			{
				if ((this._Rank != value))
				{
					this._Rank = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Reamrk", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string Reamrk
		{
			get
			{
				return this._Reamrk;
			}
			set
			{
				if ((this._Reamrk != value))
				{
					this._Reamrk = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.I_ResultData")]
	public partial class I_ResultData
	{
		
		private long _ID;
		
		private string _indicatorid;
		
		private int _year;
		
		private int _zone;
		
		private int _class;
		
		private int _Fromyear;
		
		private int _toyear;
		
		private string _type;
		
		private string _value;
		
		public I_ResultData()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.Always, DbType="BigInt NOT NULL IDENTITY", IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_indicatorid", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string indicatorid
		{
			get
			{
				return this._indicatorid;
			}
			set
			{
				if ((this._indicatorid != value))
				{
					this._indicatorid = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_year", DbType="Int NOT NULL")]
		public int year
		{
			get
			{
				return this._year;
			}
			set
			{
				if ((this._year != value))
				{
					this._year = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_zone", DbType="Int NOT NULL")]
		public int zone
		{
			get
			{
				return this._zone;
			}
			set
			{
				if ((this._zone != value))
				{
					this._zone = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="class", Storage="_class", DbType="Int NOT NULL")]
		public int @class
		{
			get
			{
				return this._class;
			}
			set
			{
				if ((this._class != value))
				{
					this._class = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fromyear", DbType="Int NOT NULL")]
		public int Fromyear
		{
			get
			{
				return this._Fromyear;
			}
			set
			{
				if ((this._Fromyear != value))
				{
					this._Fromyear = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_toyear", DbType="Int NOT NULL")]
		public int toyear
		{
			get
			{
				return this._toyear;
			}
			set
			{
				if ((this._toyear != value))
				{
					this._toyear = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_type", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string type
		{
			get
			{
				return this._type;
			}
			set
			{
				if ((this._type != value))
				{
					this._type = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_value", DbType="NVarChar(100)")]
		public string value
		{
			get
			{
				return this._value;
			}
			set
			{
				if ((this._value != value))
				{
					this._value = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.I_SOURCE")]
	public partial class I_SOURCE : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private string _Name;
		
		private string _Company;
		
		private string _Sample;
		
		private EntitySet<I_INDEX> _I_INDEX;
		
		private EntitySet<I_INDEX_EX> _I_INDEX_EX;
		
		private EntitySet<I_INDEX_HIGH_LEVEL> _I_INDEX_HIGH_LEVELs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCompanyChanging(string value);
    partial void OnCompanyChanged();
    partial void OnSampleChanging(string value);
    partial void OnSampleChanged();
    #endregion
		
		public I_SOURCE()
		{
			this._I_INDEX = new EntitySet<I_INDEX>(new Action<I_INDEX>(this.attach_I_INDEX), new Action<I_INDEX>(this.detach_I_INDEX));
			this._I_INDEX_EX = new EntitySet<I_INDEX_EX>(new Action<I_INDEX_EX>(this.attach_I_INDEX_EX), new Action<I_INDEX_EX>(this.detach_I_INDEX_EX));
			this._I_INDEX_HIGH_LEVELs = new EntitySet<I_INDEX_HIGH_LEVEL>(new Action<I_INDEX_HIGH_LEVEL>(this.attach_I_INDEX_HIGH_LEVELs), new Action<I_INDEX_HIGH_LEVEL>(this.detach_I_INDEX_HIGH_LEVELs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Company", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Company
		{
			get
			{
				return this._Company;
			}
			set
			{
				if ((this._Company != value))
				{
					this.OnCompanyChanging(value);
					this.SendPropertyChanging();
					this._Company = value;
					this.SendPropertyChanged("Company");
					this.OnCompanyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sample", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Sample
		{
			get
			{
				return this._Sample;
			}
			set
			{
				if ((this._Sample != value))
				{
					this.OnSampleChanging(value);
					this.SendPropertyChanging();
					this._Sample = value;
					this.SendPropertyChanged("Sample");
					this.OnSampleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="I_SOURCE_I_INDEX", Storage="_I_INDEX", ThisKey="ID", OtherKey="Source")]
		public EntitySet<I_INDEX> I_INDEX
		{
			get
			{
				return this._I_INDEX;
			}
			set
			{
				this._I_INDEX.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="I_SOURCE_I_INDEX_EX", Storage="_I_INDEX_EX", ThisKey="ID", OtherKey="Source")]
		public EntitySet<I_INDEX_EX> I_INDEX_EX
		{
			get
			{
				return this._I_INDEX_EX;
			}
			set
			{
				this._I_INDEX_EX.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="I_SOURCE_I_INDEX_HIGH_LEVEL", Storage="_I_INDEX_HIGH_LEVELs", ThisKey="ID", OtherKey="Source")]
		public EntitySet<I_INDEX_HIGH_LEVEL> I_INDEX_HIGH_LEVELs
		{
			get
			{
				return this._I_INDEX_HIGH_LEVELs;
			}
			set
			{
				this._I_INDEX_HIGH_LEVELs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_I_INDEX(I_INDEX entity)
		{
			this.SendPropertyChanging();
			entity.I_SOURCE = this;
		}
		
		private void detach_I_INDEX(I_INDEX entity)
		{
			this.SendPropertyChanging();
			entity.I_SOURCE = null;
		}
		
		private void attach_I_INDEX_EX(I_INDEX_EX entity)
		{
			this.SendPropertyChanging();
			entity.I_SOURCE = this;
		}
		
		private void detach_I_INDEX_EX(I_INDEX_EX entity)
		{
			this.SendPropertyChanging();
			entity.I_SOURCE = null;
		}
		
		private void attach_I_INDEX_HIGH_LEVELs(I_INDEX_HIGH_LEVEL entity)
		{
			this.SendPropertyChanging();
			entity.I_SOURCE = this;
		}
		
		private void detach_I_INDEX_HIGH_LEVELs(I_INDEX_HIGH_LEVEL entity)
		{
			this.SendPropertyChanging();
			entity.I_SOURCE = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.I_ZONE")]
	public partial class I_ZONE : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private string _Layer;
		
		private int _OID;
		
		private string _Province;
		
		private string _City;
		
		private string _District;
		
		private string _Township;
		
		private string _Village;
		
		private float _Area;
		
		private EntitySet<I_INDEX> _I_INDEX;
		
		private EntitySet<I_INDEX_EX> _I_INDEX_EX;
		
		private EntitySet<I_INDEX_HIGH_LEVEL> _I_INDEX_HIGH_LEVELs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnLayerChanging(string value);
    partial void OnLayerChanged();
    partial void OnOIDChanging(int value);
    partial void OnOIDChanged();
    partial void OnProvinceChanging(string value);
    partial void OnProvinceChanged();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnDistrictChanging(string value);
    partial void OnDistrictChanged();
    partial void OnTownshipChanging(string value);
    partial void OnTownshipChanged();
    partial void OnVillageChanging(string value);
    partial void OnVillageChanged();
    partial void OnAreaChanging(float value);
    partial void OnAreaChanged();
    #endregion
		
		public I_ZONE()
		{
			this._I_INDEX = new EntitySet<I_INDEX>(new Action<I_INDEX>(this.attach_I_INDEX), new Action<I_INDEX>(this.detach_I_INDEX));
			this._I_INDEX_EX = new EntitySet<I_INDEX_EX>(new Action<I_INDEX_EX>(this.attach_I_INDEX_EX), new Action<I_INDEX_EX>(this.detach_I_INDEX_EX));
			this._I_INDEX_HIGH_LEVELs = new EntitySet<I_INDEX_HIGH_LEVEL>(new Action<I_INDEX_HIGH_LEVEL>(this.attach_I_INDEX_HIGH_LEVELs), new Action<I_INDEX_HIGH_LEVEL>(this.detach_I_INDEX_HIGH_LEVELs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Layer", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Layer
		{
			get
			{
				return this._Layer;
			}
			set
			{
				if ((this._Layer != value))
				{
					this.OnLayerChanging(value);
					this.SendPropertyChanging();
					this._Layer = value;
					this.SendPropertyChanged("Layer");
					this.OnLayerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OID", DbType="Int NOT NULL")]
		public int OID
		{
			get
			{
				return this._OID;
			}
			set
			{
				if ((this._OID != value))
				{
					this.OnOIDChanging(value);
					this.SendPropertyChanging();
					this._OID = value;
					this.SendPropertyChanged("OID");
					this.OnOIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Province", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Province
		{
			get
			{
				return this._Province;
			}
			set
			{
				if ((this._Province != value))
				{
					this.OnProvinceChanging(value);
					this.SendPropertyChanging();
					this._Province = value;
					this.SendPropertyChanged("Province");
					this.OnProvinceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_District", DbType="VarChar(50)")]
		public string District
		{
			get
			{
				return this._District;
			}
			set
			{
				if ((this._District != value))
				{
					this.OnDistrictChanging(value);
					this.SendPropertyChanging();
					this._District = value;
					this.SendPropertyChanged("District");
					this.OnDistrictChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Township", DbType="VarChar(50)")]
		public string Township
		{
			get
			{
				return this._Township;
			}
			set
			{
				if ((this._Township != value))
				{
					this.OnTownshipChanging(value);
					this.SendPropertyChanging();
					this._Township = value;
					this.SendPropertyChanged("Township");
					this.OnTownshipChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Village", DbType="VarChar(50)")]
		public string Village
		{
			get
			{
				return this._Village;
			}
			set
			{
				if ((this._Village != value))
				{
					this.OnVillageChanging(value);
					this.SendPropertyChanging();
					this._Village = value;
					this.SendPropertyChanged("Village");
					this.OnVillageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Area", DbType="Real NOT NULL")]
		public float Area
		{
			get
			{
				return this._Area;
			}
			set
			{
				if ((this._Area != value))
				{
					this.OnAreaChanging(value);
					this.SendPropertyChanging();
					this._Area = value;
					this.SendPropertyChanged("Area");
					this.OnAreaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="I_ZONE_I_INDEX", Storage="_I_INDEX", ThisKey="ID", OtherKey="Zone")]
		public EntitySet<I_INDEX> I_INDEX
		{
			get
			{
				return this._I_INDEX;
			}
			set
			{
				this._I_INDEX.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="I_ZONE_I_INDEX_EX", Storage="_I_INDEX_EX", ThisKey="ID", OtherKey="Zone")]
		public EntitySet<I_INDEX_EX> I_INDEX_EX
		{
			get
			{
				return this._I_INDEX_EX;
			}
			set
			{
				this._I_INDEX_EX.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="I_ZONE_I_INDEX_HIGH_LEVEL", Storage="_I_INDEX_HIGH_LEVELs", ThisKey="ID", OtherKey="Zone")]
		public EntitySet<I_INDEX_HIGH_LEVEL> I_INDEX_HIGH_LEVELs
		{
			get
			{
				return this._I_INDEX_HIGH_LEVELs;
			}
			set
			{
				this._I_INDEX_HIGH_LEVELs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_I_INDEX(I_INDEX entity)
		{
			this.SendPropertyChanging();
			entity.I_ZONE = this;
		}
		
		private void detach_I_INDEX(I_INDEX entity)
		{
			this.SendPropertyChanging();
			entity.I_ZONE = null;
		}
		
		private void attach_I_INDEX_EX(I_INDEX_EX entity)
		{
			this.SendPropertyChanging();
			entity.I_ZONE = this;
		}
		
		private void detach_I_INDEX_EX(I_INDEX_EX entity)
		{
			this.SendPropertyChanging();
			entity.I_ZONE = null;
		}
		
		private void attach_I_INDEX_HIGH_LEVELs(I_INDEX_HIGH_LEVEL entity)
		{
			this.SendPropertyChanging();
			entity.I_ZONE = this;
		}
		
		private void detach_I_INDEX_HIGH_LEVELs(I_INDEX_HIGH_LEVEL entity)
		{
			this.SendPropertyChanging();
			entity.I_ZONE = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.I_INDEX_EX")]
	public partial class I_INDEX_EX : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private byte _Type;
		
		private byte _Class;
		
		private int _Group;
		
		private string _Name;
		
		private System.DateTime _FromDate;
		
		private System.DateTime _ToDate;
		
		private string _Remark;
		
		private string _Rule;
		
		private System.Nullable<long> _Source;
		
		private long _Zone;
		
		private System.Nullable<float> _Value;
		
		private System.Nullable<float> _StdValue;
		
		private System.Nullable<float> _WarnValueHigh;
		
		private System.Nullable<float> _WarnValueLow;
		
		private string _Unit;
		
		private EntityRef<I_SOURCE> _I_SOURCE;
		
		private EntityRef<I_ZONE> _I_ZONE;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnTypeChanging(byte value);
    partial void OnTypeChanged();
    partial void OnClassChanging(byte value);
    partial void OnClassChanged();
    partial void OnGroupChanging(int value);
    partial void OnGroupChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnFromDateChanging(System.DateTime value);
    partial void OnFromDateChanged();
    partial void OnToDateChanging(System.DateTime value);
    partial void OnToDateChanged();
    partial void OnRemarkChanging(string value);
    partial void OnRemarkChanged();
    partial void OnRuleChanging(string value);
    partial void OnRuleChanged();
    partial void OnSourceChanging(System.Nullable<long> value);
    partial void OnSourceChanged();
    partial void OnZoneChanging(long value);
    partial void OnZoneChanged();
    partial void OnValueChanging(System.Nullable<float> value);
    partial void OnValueChanged();
    partial void OnStdValueChanging(System.Nullable<float> value);
    partial void OnStdValueChanged();
    partial void OnWarnValueHighChanging(System.Nullable<float> value);
    partial void OnWarnValueHighChanged();
    partial void OnWarnValueLowChanging(System.Nullable<float> value);
    partial void OnWarnValueLowChanged();
    partial void OnUnitChanging(string value);
    partial void OnUnitChanged();
    #endregion
		
		public I_INDEX_EX()
		{
			this._I_SOURCE = default(EntityRef<I_SOURCE>);
			this._I_ZONE = default(EntityRef<I_ZONE>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="TinyInt NOT NULL")]
		public byte Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Class", DbType="TinyInt NOT NULL")]
		public byte Class
		{
			get
			{
				return this._Class;
			}
			set
			{
				if ((this._Class != value))
				{
					this.OnClassChanging(value);
					this.SendPropertyChanging();
					this._Class = value;
					this.SendPropertyChanged("Class");
					this.OnClassChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Group]", Storage="_Group", DbType="Int NOT NULL")]
		public int Group
		{
			get
			{
				return this._Group;
			}
			set
			{
				if ((this._Group != value))
				{
					this.OnGroupChanging(value);
					this.SendPropertyChanging();
					this._Group = value;
					this.SendPropertyChanged("Group");
					this.OnGroupChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(100)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FromDate", DbType="DateTime NOT NULL")]
		public System.DateTime FromDate
		{
			get
			{
				return this._FromDate;
			}
			set
			{
				if ((this._FromDate != value))
				{
					this.OnFromDateChanging(value);
					this.SendPropertyChanging();
					this._FromDate = value;
					this.SendPropertyChanged("FromDate");
					this.OnFromDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ToDate", DbType="DateTime NOT NULL")]
		public System.DateTime ToDate
		{
			get
			{
				return this._ToDate;
			}
			set
			{
				if ((this._ToDate != value))
				{
					this.OnToDateChanging(value);
					this.SendPropertyChanging();
					this._ToDate = value;
					this.SendPropertyChanged("ToDate");
					this.OnToDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Remark", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this.OnRemarkChanging(value);
					this.SendPropertyChanging();
					this._Remark = value;
					this.SendPropertyChanged("Remark");
					this.OnRemarkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Rule]", Storage="_Rule", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string Rule
		{
			get
			{
				return this._Rule;
			}
			set
			{
				if ((this._Rule != value))
				{
					this.OnRuleChanging(value);
					this.SendPropertyChanging();
					this._Rule = value;
					this.SendPropertyChanged("Rule");
					this.OnRuleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Source", DbType="BigInt")]
		public System.Nullable<long> Source
		{
			get
			{
				return this._Source;
			}
			set
			{
				if ((this._Source != value))
				{
					if (this._I_SOURCE.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSourceChanging(value);
					this.SendPropertyChanging();
					this._Source = value;
					this.SendPropertyChanged("Source");
					this.OnSourceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Zone", DbType="BigInt NOT NULL")]
		public long Zone
		{
			get
			{
				return this._Zone;
			}
			set
			{
				if ((this._Zone != value))
				{
					if (this._I_ZONE.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnZoneChanging(value);
					this.SendPropertyChanging();
					this._Zone = value;
					this.SendPropertyChanged("Zone");
					this.OnZoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="Real")]
		public System.Nullable<float> Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StdValue", DbType="Real")]
		public System.Nullable<float> StdValue
		{
			get
			{
				return this._StdValue;
			}
			set
			{
				if ((this._StdValue != value))
				{
					this.OnStdValueChanging(value);
					this.SendPropertyChanging();
					this._StdValue = value;
					this.SendPropertyChanged("StdValue");
					this.OnStdValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WarnValueHigh", DbType="Real")]
		public System.Nullable<float> WarnValueHigh
		{
			get
			{
				return this._WarnValueHigh;
			}
			set
			{
				if ((this._WarnValueHigh != value))
				{
					this.OnWarnValueHighChanging(value);
					this.SendPropertyChanging();
					this._WarnValueHigh = value;
					this.SendPropertyChanged("WarnValueHigh");
					this.OnWarnValueHighChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WarnValueLow", DbType="Real")]
		public System.Nullable<float> WarnValueLow
		{
			get
			{
				return this._WarnValueLow;
			}
			set
			{
				if ((this._WarnValueLow != value))
				{
					this.OnWarnValueLowChanging(value);
					this.SendPropertyChanging();
					this._WarnValueLow = value;
					this.SendPropertyChanged("WarnValueLow");
					this.OnWarnValueLowChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Unit", DbType="VarChar(40) NOT NULL", CanBeNull=false)]
		public string Unit
		{
			get
			{
				return this._Unit;
			}
			set
			{
				if ((this._Unit != value))
				{
					this.OnUnitChanging(value);
					this.SendPropertyChanging();
					this._Unit = value;
					this.SendPropertyChanged("Unit");
					this.OnUnitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="I_SOURCE_I_INDEX_EX", Storage="_I_SOURCE", ThisKey="Source", OtherKey="ID", IsForeignKey=true)]
		public I_SOURCE I_SOURCE
		{
			get
			{
				return this._I_SOURCE.Entity;
			}
			set
			{
				I_SOURCE previousValue = this._I_SOURCE.Entity;
				if (((previousValue != value) 
							|| (this._I_SOURCE.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._I_SOURCE.Entity = null;
						previousValue.I_INDEX_EX.Remove(this);
					}
					this._I_SOURCE.Entity = value;
					if ((value != null))
					{
						value.I_INDEX_EX.Add(this);
						this._Source = value.ID;
					}
					else
					{
						this._Source = default(Nullable<long>);
					}
					this.SendPropertyChanged("I_SOURCE");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="I_ZONE_I_INDEX_EX", Storage="_I_ZONE", ThisKey="Zone", OtherKey="ID", IsForeignKey=true)]
		public I_ZONE I_ZONE
		{
			get
			{
				return this._I_ZONE.Entity;
			}
			set
			{
				I_ZONE previousValue = this._I_ZONE.Entity;
				if (((previousValue != value) 
							|| (this._I_ZONE.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._I_ZONE.Entity = null;
						previousValue.I_INDEX_EX.Remove(this);
					}
					this._I_ZONE.Entity = value;
					if ((value != null))
					{
						value.I_INDEX_EX.Add(this);
						this._Zone = value.ID;
					}
					else
					{
						this._Zone = default(long);
					}
					this.SendPropertyChanged("I_ZONE");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.I_INDEX_HIGH_LEVEL")]
	public partial class I_INDEX_HIGH_LEVEL : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private byte _Type;
		
		private byte _Class;
		
		private int _Group;
		
		private string _Name;
		
		private System.DateTime _FromDate;
		
		private System.DateTime _ToDate;
		
		private string _Remark;
		
		private string _Rule;
		
		private System.Nullable<long> _Source;
		
		private long _Zone;
		
		private float _Value;
		
		private System.Nullable<float> _StdValue;
		
		private System.Nullable<float> _WarnValueHigh;
		
		private System.Nullable<float> _WarnValueLow;
		
		private string _Unit;
		
		private EntityRef<I_SOURCE> _I_SOURCE;
		
		private EntityRef<I_ZONE> _I_ZONE;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnTypeChanging(byte value);
    partial void OnTypeChanged();
    partial void OnClassChanging(byte value);
    partial void OnClassChanged();
    partial void OnGroupChanging(int value);
    partial void OnGroupChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnFromDateChanging(System.DateTime value);
    partial void OnFromDateChanged();
    partial void OnToDateChanging(System.DateTime value);
    partial void OnToDateChanged();
    partial void OnRemarkChanging(string value);
    partial void OnRemarkChanged();
    partial void OnRuleChanging(string value);
    partial void OnRuleChanged();
    partial void OnSourceChanging(System.Nullable<long> value);
    partial void OnSourceChanged();
    partial void OnZoneChanging(long value);
    partial void OnZoneChanged();
    partial void OnValueChanging(float value);
    partial void OnValueChanged();
    partial void OnStdValueChanging(System.Nullable<float> value);
    partial void OnStdValueChanged();
    partial void OnWarnValueHighChanging(System.Nullable<float> value);
    partial void OnWarnValueHighChanged();
    partial void OnWarnValueLowChanging(System.Nullable<float> value);
    partial void OnWarnValueLowChanged();
    partial void OnUnitChanging(string value);
    partial void OnUnitChanged();
    #endregion
		
		public I_INDEX_HIGH_LEVEL()
		{
			this._I_SOURCE = default(EntityRef<I_SOURCE>);
			this._I_ZONE = default(EntityRef<I_ZONE>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="TinyInt NOT NULL")]
		public byte Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Class", DbType="TinyInt NOT NULL")]
		public byte Class
		{
			get
			{
				return this._Class;
			}
			set
			{
				if ((this._Class != value))
				{
					this.OnClassChanging(value);
					this.SendPropertyChanging();
					this._Class = value;
					this.SendPropertyChanged("Class");
					this.OnClassChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Group]", Storage="_Group", DbType="Int NOT NULL")]
		public int Group
		{
			get
			{
				return this._Group;
			}
			set
			{
				if ((this._Group != value))
				{
					this.OnGroupChanging(value);
					this.SendPropertyChanging();
					this._Group = value;
					this.SendPropertyChanged("Group");
					this.OnGroupChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(100)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FromDate", DbType="DateTime NOT NULL")]
		public System.DateTime FromDate
		{
			get
			{
				return this._FromDate;
			}
			set
			{
				if ((this._FromDate != value))
				{
					this.OnFromDateChanging(value);
					this.SendPropertyChanging();
					this._FromDate = value;
					this.SendPropertyChanged("FromDate");
					this.OnFromDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ToDate", DbType="DateTime NOT NULL")]
		public System.DateTime ToDate
		{
			get
			{
				return this._ToDate;
			}
			set
			{
				if ((this._ToDate != value))
				{
					this.OnToDateChanging(value);
					this.SendPropertyChanging();
					this._ToDate = value;
					this.SendPropertyChanged("ToDate");
					this.OnToDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Remark", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this.OnRemarkChanging(value);
					this.SendPropertyChanging();
					this._Remark = value;
					this.SendPropertyChanged("Remark");
					this.OnRemarkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Rule]", Storage="_Rule", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string Rule
		{
			get
			{
				return this._Rule;
			}
			set
			{
				if ((this._Rule != value))
				{
					this.OnRuleChanging(value);
					this.SendPropertyChanging();
					this._Rule = value;
					this.SendPropertyChanged("Rule");
					this.OnRuleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Source", DbType="BigInt")]
		public System.Nullable<long> Source
		{
			get
			{
				return this._Source;
			}
			set
			{
				if ((this._Source != value))
				{
					if (this._I_SOURCE.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSourceChanging(value);
					this.SendPropertyChanging();
					this._Source = value;
					this.SendPropertyChanged("Source");
					this.OnSourceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Zone", DbType="BigInt NOT NULL")]
		public long Zone
		{
			get
			{
				return this._Zone;
			}
			set
			{
				if ((this._Zone != value))
				{
					if (this._I_ZONE.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnZoneChanging(value);
					this.SendPropertyChanging();
					this._Zone = value;
					this.SendPropertyChanged("Zone");
					this.OnZoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="Real NOT NULL")]
		public float Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StdValue", DbType="Real")]
		public System.Nullable<float> StdValue
		{
			get
			{
				return this._StdValue;
			}
			set
			{
				if ((this._StdValue != value))
				{
					this.OnStdValueChanging(value);
					this.SendPropertyChanging();
					this._StdValue = value;
					this.SendPropertyChanged("StdValue");
					this.OnStdValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WarnValueHigh", DbType="Real")]
		public System.Nullable<float> WarnValueHigh
		{
			get
			{
				return this._WarnValueHigh;
			}
			set
			{
				if ((this._WarnValueHigh != value))
				{
					this.OnWarnValueHighChanging(value);
					this.SendPropertyChanging();
					this._WarnValueHigh = value;
					this.SendPropertyChanged("WarnValueHigh");
					this.OnWarnValueHighChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WarnValueLow", DbType="Real")]
		public System.Nullable<float> WarnValueLow
		{
			get
			{
				return this._WarnValueLow;
			}
			set
			{
				if ((this._WarnValueLow != value))
				{
					this.OnWarnValueLowChanging(value);
					this.SendPropertyChanging();
					this._WarnValueLow = value;
					this.SendPropertyChanged("WarnValueLow");
					this.OnWarnValueLowChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Unit", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Unit
		{
			get
			{
				return this._Unit;
			}
			set
			{
				if ((this._Unit != value))
				{
					this.OnUnitChanging(value);
					this.SendPropertyChanging();
					this._Unit = value;
					this.SendPropertyChanged("Unit");
					this.OnUnitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="I_SOURCE_I_INDEX_HIGH_LEVEL", Storage="_I_SOURCE", ThisKey="Source", OtherKey="ID", IsForeignKey=true)]
		public I_SOURCE I_SOURCE
		{
			get
			{
				return this._I_SOURCE.Entity;
			}
			set
			{
				I_SOURCE previousValue = this._I_SOURCE.Entity;
				if (((previousValue != value) 
							|| (this._I_SOURCE.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._I_SOURCE.Entity = null;
						previousValue.I_INDEX_HIGH_LEVELs.Remove(this);
					}
					this._I_SOURCE.Entity = value;
					if ((value != null))
					{
						value.I_INDEX_HIGH_LEVELs.Add(this);
						this._Source = value.ID;
					}
					else
					{
						this._Source = default(Nullable<long>);
					}
					this.SendPropertyChanged("I_SOURCE");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="I_ZONE_I_INDEX_HIGH_LEVEL", Storage="_I_ZONE", ThisKey="Zone", OtherKey="ID", IsForeignKey=true)]
		public I_ZONE I_ZONE
		{
			get
			{
				return this._I_ZONE.Entity;
			}
			set
			{
				I_ZONE previousValue = this._I_ZONE.Entity;
				if (((previousValue != value) 
							|| (this._I_ZONE.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._I_ZONE.Entity = null;
						previousValue.I_INDEX_HIGH_LEVELs.Remove(this);
					}
					this._I_ZONE.Entity = value;
					if ((value != null))
					{
						value.I_INDEX_HIGH_LEVELs.Add(this);
						this._Zone = value.ID;
					}
					else
					{
						this._Zone = default(long);
					}
					this.SendPropertyChanged("I_ZONE");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
